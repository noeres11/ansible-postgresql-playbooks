# This playbook creates roles and users for PostgreSQL
- name: Create roles and users for PostgreSQL
  hosts: localhost
  become: true
  
  vars:
    db_name: testdb
    schema_name: myschema
    
    # Role definition WITHOUT login privilege
    db_roles:
      - name: read_only
        login: false
        
      - name: read_write
        login: false
    
    # User definition with the login privilege.
    # Every user must be assigned to one of the predefined roles.
    db_users:
      - name: monitoring_user
        password: "NE&h2Gjqw6"
        memberof: read_only
        
      - name: app_user
        password: "C2+Atg4%uT"
        memberof: read_write
  
  tasks:
    - name: Check that all users have included the field 'memberof'
      assert:
        that: item.memberof is defined
        fail_msg: "'memberof' is required for user {{ item.name }}"
      loop: "{{ db_users }}"
      
    - name: Create roles without login privilege
      community.postgresql.postgresql_user:
        name: "{{ item.name }}"
        role_attr_flags: "NOLOGIN"
        state: present
      loop: "{{ db_roles }}"
      
    - name: Create users with login privilege
      community.postgresql.postgresql_user:
        name: "{{ item.name }}"
        password: "{{ item.password }}"
        role_attr_flags: "LOGIN"
        state: present
      loop: "{{ db_users }}"

    - name: Grant role membership to users
      community.postgresql.postgresql_membership:
        user: "{{ item.name }}"
        groups: ["{{ item.memberof }}"]
        state: present
      loop: "{{ db_users }}"
 
    - name: Grant USAGE on public schema to both roles
      community.postgresql.postgresql_privs:
        db: "{{ db_name }}"
        type: schema
        privs: USAGE
        objs: public
        roles: read_only,read_write
        state: present
      
      # Alter default privileges in schema public grant select on tables to read_only;
      # Every future object can be automatically accessed by the roles, without having to specify permissions.
      
    - name:  Alter default privileges in schema public
      community.postgresql.postgresql_query:
        db: "{{ db_name }}"
        query: |
          ALTER DEFAULT PRIVILEGES IN SCHEMA public
          GRANT SELECT ON TABLES TO read_only;
          
          ALTER DEFAULT PRIVILEGES IN SCHEMA public
          GRANT SELECT, INSERT, UPDATE, DELETE ON TABLES TO read_write;




